#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble

\renewcommand{\vec}[1]{\mathbf{#1}}

\renewcommand{\labelenumi}{(\alph{enumi})}
\renewcommand{\labelenumii}{(\roman{enumii})}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\topmargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 2
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
18.335 Problem Set 2
\end_layout

\begin_layout Standard
Due Monday, 16 February 2015.
\end_layout

\begin_layout Subsection*
Problem 1: (10 points)
\end_layout

\begin_layout Standard
The smallest integer that cannot be exactly represented is 
\begin_inset Formula $n=\beta^{t}+1$
\end_inset

 (for base-
\begin_inset Formula $\beta$
\end_inset

 with a 
\begin_inset Formula $t$
\end_inset

-digit mantissa).
 You might be tempted to think that 
\begin_inset Formula $\beta^{t}$
\end_inset

 cannot be represented, since a 
\begin_inset Formula $t$
\end_inset

-digit number, at first glance, only goes up to 
\begin_inset Formula $\beta^{t}-1$
\end_inset

 (e.g.
 three base-10 digits can only represent up to 999, not 1000).
 However, 
\begin_inset Formula $\beta^{t}$
\end_inset

 can be represented by 
\begin_inset Formula $\beta^{t-1}\cdot\beta^{1}$
\end_inset

, where the 
\begin_inset Formula $\beta^{1}$
\end_inset

 is absorbed in the exponent.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

In IEEE single and double precision, 
\begin_inset Formula $\beta=2$
\end_inset

 and 
\begin_inset Formula $t=24$
\end_inset

 and 
\begin_inset Formula $53$
\end_inset

, respectively, giving 
\begin_inset Formula $2^{24}+1=16,777,217$
\end_inset

 and 
\begin_inset Formula $2^{53}+1=9,007,199,254,740,993$
\end_inset

.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Evidence that 
\begin_inset Formula $n=2^{53}+1$
\end_inset

 is not exactly represented but that numbers less than that are can be presented
 in a variety of ways.
 In the pset1-solutions notebook, we check exactness by comparing to Julia's
 
\family typewriter
Int64
\family default
 (built-in integer) type, which exactly represents values up to 
\begin_inset Formula $2^{63}-1$
\end_inset

.
\end_layout

\begin_layout Subsection*
Problem 2: (5+10+10 points)
\end_layout

\begin_layout Standard
See the pset1 solutions notebook for Julia code, results, and explanations.
\end_layout

\begin_layout Subsection*
Problem 3: (10+10+10 points)
\end_layout

\begin_layout Standard
See the pset1 solutions notebook for Julia code, results, and explanations.
\end_layout

\begin_layout Subsection*
Problem 4: (10+10+5 points)
\end_layout

\begin_layout Enumerate
We can prove this by induction on 
\begin_inset Formula $n$
\end_inset

.
 For 
\begin_inset Formula $n=1$
\end_inset

, it is trivial with 
\begin_inset Formula $\epsilon_{1}=0$
\end_inset

; alterenatively, for the case of 
\begin_inset Formula $n=2$
\end_inset

, 
\begin_inset Formula $\tilde{f}(x)=(0\oplus x_{1})\oplus x_{2}=x_{1}\oplus x_{2}=(x_{1}+x_{2})(1+\epsilon_{2})$
\end_inset

 for 
\begin_inset Formula $|\epsilon_{2}|\leq\epsilon_{\mbox{machine}}$
\end_inset

 is a consequence of the correct rounding of 
\begin_inset Formula $\oplus$
\end_inset

 (
\begin_inset Formula $0\oplus x_{1}$
\end_inset

 must equal 
\begin_inset Formula $x_{1}$
\end_inset

, and 
\begin_inset Formula $x_{1}\oplus x_{2}$
\end_inset

 must be within 
\begin_inset Formula $\epsilon_{\mbox{machine}}$
\end_inset

 of the exact result).
 (If we don't assume correct rounding, then the result is only slightly
 modified by an additional 
\begin_inset Formula $1+\epsilon_{1}$
\end_inset

 factor multiplying 
\begin_inset Formula $x_{1}$
\end_inset

.)
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Now for the inductive step.
 Suppose 
\begin_inset Formula $\tilde{s}_{n-1}=\sum_{i=1}^{n-1}x_{i}\prod_{k=i}^{n-1}(1+\epsilon_{k})$
\end_inset

.
 Then 
\begin_inset Formula $\tilde{s}_{n}=\tilde{s}_{n-1}\oplus x_{n}=(\tilde{s}_{n-1}+x_{n})(1+\epsilon_{n})$
\end_inset

 where 
\begin_inset Formula $|\epsilon_{n}|<\epsilon_{\mbox{machine}}$
\end_inset

 is guaranteed by floating-point addition.
 The result follows by inspection: the previous terms are all multiplied
 by 
\begin_inset Formula $(1+\epsilon_{n})$
\end_inset

, and we add a new term 
\begin_inset Formula $x_{n}(1+\epsilon_{n})$
\end_inset

.
 
\end_layout

\begin_layout Enumerate
First, let us multiply out the terms: 
\begin_inset Formula $(1+\epsilon_{i})\cdots(1+\epsilon_{n})=1+\sum_{k=i}^{n}\epsilon_{k}+(\mbox{products of }\epsilon)=1+\delta_{i}$
\end_inset

, where the products of 
\begin_inset Formula $\epsilon_{k}$
\end_inset

 terms are 
\begin_inset Formula $O(\epsilon_{\mbox{machine}}^{2})$
\end_inset

, and hence 
\begin_inset Formula $|\delta_{i}|\leq\sum_{k=i}^{n}|\epsilon_{k}|+O(\epsilon_{\mbox{machine}}^{2})\leq(n-i+1)\epsilon_{\mbox{machine}}+O(\epsilon_{\mbox{machine}}^{2})$
\end_inset

.
 Now e have: 
\begin_inset Formula $\tilde{f}(x)=f(x)+(x_{1}+x_{2})\delta_{2}+\sum_{i=3}^{n}x_{i}\delta_{i}$
\end_inset

, and hence (by the triangle inequality): 
\begin_inset Formula 
\[
|\tilde{f}(x)-f(x)|\leq|x_{1}|\,|\delta_{2}|+\sum_{i=2}^{n}|x_{i}|\,|\delta_{i}|.
\]

\end_inset

But 
\begin_inset Formula $|\delta_{i}|\leq n\epsilon_{\mbox{machine}}+O(\epsilon_{\mbox{machine}}^{2})$
\end_inset

 for all 
\begin_inset Formula $i$
\end_inset

, and hence 
\begin_inset Formula $|\tilde{f}(x)-f(x)|\leq n\epsilon_{\mbox{machine}}\sum_{i=1}^{n}|x_{i}|$
\end_inset

.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Note: This does 
\emph on
not
\emph default
 correspond to forwards stability, since we have only shown that 
\begin_inset Formula $|\tilde{f}(x)-f(x)|=\Vert x\Vert O(\epsilon_{\mbox{machine}})$
\end_inset

, which is different from 
\begin_inset Formula $|\tilde{f}(x)-f(x)|=|f(x)|O(\epsilon_{\mbox{machine}})$
\end_inset

! Our 
\begin_inset Formula $O(\epsilon_{\mbox{machine}})$
\end_inset

 is indeed uniformly convergent, however (i.e.
 the constant factors are independent of 
\begin_inset Formula $x$
\end_inset

, although they depend on 
\begin_inset Formula $n$
\end_inset

).
\end_layout

\begin_layout Enumerate
For uniform random 
\begin_inset Formula $\epsilon_{k}$
\end_inset

, since 
\begin_inset Formula $\delta_{i}$
\end_inset

 is the sum of 
\begin_inset Formula $(n-i+1)$
\end_inset

 random variables with variance 
\begin_inset Formula $\sim\epsilon_{\mbox{machine}}$
\end_inset

, it follows from the usual properties of random walks (i.e.
 the 
\emph on
central limit theorem
\emph default
) that the mean 
\begin_inset Formula $|\delta_{i}|$
\end_inset

 has magnitude 
\begin_inset Formula $\sim\sqrt{n-i+1}O(\epsilon_{\mbox{machine}})\leq\sqrt{n}O(\epsilon_{\mbox{machine}})$
\end_inset

.
 Hence 
\begin_inset Formula $|\tilde{f}(x)-f(x)|=O\left(\sqrt{n}\epsilon_{\mbox{machine}}\sum_{i=1}^{n}|x_{i}|\right)$
\end_inset

.
\end_layout

\begin_layout Subsection*
Problem 5: (10+5+5+10 points)
\end_layout

\begin_layout Standard
Here you will analyze 
\begin_inset Formula $f(x)=\sum_{i=1}^{n}x_{i}$
\end_inset

 as in problem
\begin_inset space ~
\end_inset

2, but this time you will compute 
\begin_inset Formula $\tilde{f}(x)$
\end_inset

 in a different way.
 In particular, compute 
\begin_inset Formula $\tilde{f}(x)$
\end_inset

 by a recursive divide-and-conquer approach, recursively dividing the set
 of values to be summed in two halves and then summing the halves: 
\begin_inset Formula 
\[
\tilde{f}(x)=\begin{cases}
0 & \mbox{if }n=0\\
x_{1} & \mbox{if }n=1\\
\tilde{f}(x_{1:\left\lfloor n/2\right\rfloor })\oplus\tilde{f}(x_{\left\lfloor n/2\right\rfloor +1:n}) & \mbox{if }n>1
\end{cases},
\]

\end_inset

where 
\begin_inset Formula $\left\lfloor y\right\rfloor $
\end_inset

 denotes the greatest integer 
\begin_inset Formula $\leq y$
\end_inset

 (i.e.
 
\begin_inset Formula $y$
\end_inset

 rounded down).
 In exact arithmetic, this computes 
\begin_inset Formula $f(x)$
\end_inset

 exactly, but in floating-point arithmetic this will have very different
 error characteristics than the simple loop-based summation in problem
\begin_inset space ~
\end_inset

2.
\end_layout

\begin_layout Enumerate
Suppose 
\begin_inset Formula $n=2^{m}$
\end_inset

 with 
\begin_inset Formula $m\geq1$
\end_inset

.
 We will first show that 
\begin_inset Formula 
\[
\tilde{f}(x)=\sum_{i=1}^{n}x_{i}\prod_{k=1}^{m}(1+\epsilon_{i,k})
\]

\end_inset

where 
\begin_inset Formula $|\epsilon_{i,k}|\leq\epsilon_{\mbox{machine}}$
\end_inset

.
 We prove the above relationship by induction.
 For 
\begin_inset Formula $n=2$
\end_inset

 it follows from the definition of floating-point arithmetic.
 Now, suppose it is true for 
\begin_inset Formula $n$
\end_inset

 and we wish to prove it for 
\begin_inset Formula $2n$
\end_inset

.
 The sum of 
\begin_inset Formula $2n$
\end_inset

 number is first summing the two halves recursively (which has the above
 bound for each half since they are of length 
\begin_inset Formula $n$
\end_inset

) and then adding the two sums, for a total result of 
\begin_inset Formula 
\[
\tilde{f}(x\in\mathbb{R}^{2n})=\left[\sum_{i=1}^{n}x_{i}\prod_{k=1}^{m}(1+\epsilon_{i,k})+\sum_{i=n+1}^{2n}x_{i}\prod_{k=1}^{m}(1+\epsilon_{i,k})\right](1+\epsilon)
\]

\end_inset

for 
\begin_inset Formula $|\epsilon|<\epsilon_{\mbox{machine}}$
\end_inset

.
 The result follows by inspection, with 
\begin_inset Formula $\epsilon_{i,m+1}=\epsilon$
\end_inset

.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Then, we use the result from problem
\begin_inset space ~
\end_inset

2 that 
\begin_inset Formula $\prod_{k=1}^{m}(1+\epsilon_{i,k})=1+\delta_{i}$
\end_inset

 with 
\begin_inset Formula $|\delta_{i}|\leq m\epsilon_{\mbox{machine}}+O(\epsilon_{\mbox{machine}}^{2})$
\end_inset

.
 Since 
\begin_inset Formula $m=\log_{2}(n)$
\end_inset

, the desired result follows immediately.
\end_layout

\begin_layout Enumerate
As in problem
\begin_inset space ~
\end_inset

2, our 
\begin_inset Formula $\delta_{i}$
\end_inset

 factor is now a sum of random 
\begin_inset Formula $\epsilon_{i,k}$
\end_inset

 values and grows as 
\begin_inset Formula $\sqrt{m}$
\end_inset

.
 That is, we expect that the average error grows as 
\begin_inset Formula $\sqrt{\log_{2}n}O(\epsilon_{\mbox{machine}})\sum_{i}|x_{i}|$
\end_inset

.
 
\end_layout

\begin_layout Enumerate
Just enlarge the base case.
 Instead of recursively dividing the problem in two until 
\begin_inset Formula $n<2$
\end_inset

, divide the problem in two until 
\begin_inset Formula $n<N$
\end_inset

 for some 
\begin_inset Formula $N$
\end_inset

, at which point we sum the 
\begin_inset Formula $<N$
\end_inset

 numbers with a simple loop as in problem 2.
 A little arithmetic reveals that this produces 
\begin_inset Formula $\sim2n/N$
\end_inset

 function calls---this is negligible compared to the 
\begin_inset Formula $n-1$
\end_inset

 additions required as long as 
\begin_inset Formula $N$
\end_inset

 is sufficiently large (say, 
\begin_inset Formula $N=200$
\end_inset

), and the efficiency should be roughly that of a simple loop.
 (See the pset1 Julia notebook for benchmarks and explanations.)
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Using a simple loop has error bounds that grow as 
\begin_inset Formula $N$
\end_inset

 as you showed above, but 
\begin_inset Formula $N$
\end_inset

 is just a constant, so this doesn't change the overall logarithmic nature
 of the error growth with 
\begin_inset Formula $n$
\end_inset

.
 A more careful analysis analogous to above reveals that the worst-case
 error grows as 
\begin_inset Formula $[N+\log_{2}(n/N)]\epsilon_{\mbox{machine}}\sum_{i}|x_{i}|$
\end_inset

.
 Asymptotically, this is not only 
\begin_inset Formula $\log_{2}(n)\epsilon_{\mbox{machine}}\sum_{i}|x_{i}|$
\end_inset

 error growth, but with the same asymptotic constant factor!
\end_layout

\begin_layout Enumerate
Instead of 
\begin_inset Quotes eld
\end_inset

if (n < 2),
\begin_inset Quotes erd
\end_inset

 just do (for example) 
\begin_inset Quotes eld
\end_inset

if (n < 200)
\begin_inset Quotes erd
\end_inset

.
 See the notebook for code and results.
\end_layout

\end_body
\end_document
